# Define a versão do Docker Compose (opcional nas versões mais recentes)
services:
  # Serviço 1: O backend da sua aplicação
  backend:
    build:
      context: .  # Constrói a imagem usando o Dockerfile no diretório atual
    container_name: emotion-api
    ports:
      # Mapeia a porta 8000 do seu computador (host) para a porta 8000 do container
      - "8000:8000"
    volumes:
      # Monta o diretório atual no diretório /app do container.
      # Isso permite que você edite o código e veja as mudanças sem precisar reconstruir a imagem (hot-reloading).
      - .:/app
    environment:
      # Passa a URL de conexão do banco de dados como uma variável de ambiente para a aplicação Python.
      # 'postgres' é o nome do serviço do banco de dados abaixo.
      - DATABASE_URL=postgresql://user:password@postgres:5432/emotiondb
    depends_on:
      # Garante que o serviço 'postgres' inicie antes do serviço 'backend'.
      - postgres
    restart: always # Reinicia o container automaticamente se ele parar.

  # Serviço 2: O banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine # Usa a imagem oficial e leve do PostgreSQL 15.
    container_name: emotion-db-pg
    ports:
      # Mapeia a porta 5432 do seu computador para a porta 5432 do container (para acesso direto ao DB, se necessário).
      - "5434:5432"
    environment:
      # Define as credenciais e o nome do banco de dados que serão criados na primeira inicialização.
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=emotiondb
    volumes:
      # Persiste os dados do banco de dados em um volume nomeado.
      # Isso garante que seus dados não sejam perdidos ao parar ou reiniciar os containers.
      - postgres-data:/var/lib/postgresql/data
    restart: always

# Define o volume nomeado para persistir os dados do PostgreSQL.
volumes:
  postgres-data:
    driver: local